//---------------------------------------------------------------------------

#pragma hdrstop

#include "Functions.h"

void sortByPressure(vector<CPatient> & vec, int left, int right, bool increase)
{
	int i = left, j = right;
	CPatient tmp;
	int pivot = vec[(left + right) / 2].getSPressure();

	if(increase){
		while (i <= j)
		{
			while (vec[i].getSPressure() < pivot)
				i++;
			while (vec[j].getSPressure() > pivot)
				j--;
			if (i <= j) {
					tmp = vec[i];
					vec[i] = vec[j];
					vec[j] = tmp;

				i++;
				j--;
			}
		};
		//рекурсія
		if (left < j)
			sortByPressure(vec, left, j, 1);
		if (i < right)
			sortByPressure(vec, i, right, 1);
	}

	else {
		while (i <= j)
		{
			while (vec[i].getSPressure() > pivot)
				i++;
			while (vec[j].getSPressure() < pivot)
				j--;
			if (i <= j) {
					tmp = vec[i];
					vec[i] = vec[j];
					vec[j] = tmp;

				i++;
				j--;
			}
		};
		//рекурсія
		if (left < j)
			sortByPressure(vec, left, j, 0);
		if (i < right)
			sortByPressure(vec, i, right, 0);
	}
}

void sortByPulse(vector<CPatient> & vec, int left, int right, bool increase)
{
	int i = left, j = right;
	CPatient tmp;
	int pivot = vec[(left + right) / 2].getPulse();

	if(increase){
		while (i <= j)
		{
			while (vec[i].getPulse() < pivot)
				i++;
			while (vec[j].getPulse() > pivot)
				j--;
			if (i <= j) {
					tmp = vec[i];
					vec[i] = vec[j];
					vec[j] = tmp;

				i++;
				j--;
			}
		};
	//рекурсія
	if (left < j)
		sortByPulse(vec, left, j, 1);
	if (i < right)
		sortByPulse(vec, i, right, 1);
	}

	else {
		while (i <= j)
		{
			while (vec[i].getPulse() > pivot)
				i++;
			while (vec[j].getPulse() < pivot)
				j--;
			if (i <= j) {
					tmp = vec[i];
					vec[i] = vec[j];
					vec[j] = tmp;

				i++;
				j--;
			}
		};
	//рекурсія
	if (left < j)
		sortByPulse(vec, left, j, 0);
	if (i < right)
		sortByPulse(vec, i, right, 0);
	}
}
//---------------------------------------------------------------------------
#pragma package(smart_init)
